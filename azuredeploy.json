{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "10938810342952495293"
    }
  },
  "parameters": {
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "taxassistant-plan",
      "metadata": {
        "description": "Name of the App Service Plan"
      }
    },
    "webAppName": {
      "type": "string",
      "defaultValue": "[format('taxassistant-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Web App"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "West Europe",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "F1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "S1",
        "S2",
        "P1v3",
        "P2v3"
      ],
      "metadata": {
        "description": "SKU for App Service Plan"
      }
    },
    "nsaSearchApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "NSA Search API Key"
      }
    },
    "nsaDetailApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "NSA Detail API Key"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('kv-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Key Vault Name"
      }
    },
    "enableKeyVaultRecovery": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Key Vault recovery (for existing deleted vaults)"
      }
    },
    "forceRedeploy": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmmss')]",
      "metadata": {
        "description": "Force application redeployment (change this value to trigger update)"
      }
    },
    "gitHubPat": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "GitHub PAT token for automatic secret creation (optional)"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "[if(equals(parameters('sku'), 'F1'), 'Free', if(equals(parameters('sku'), 'B1'), 'Basic', if(equals(parameters('sku'), 'B2'), 'Basic', if(equals(parameters('sku'), 'S1'), 'Standard', if(equals(parameters('sku'), 'S2'), 'Standard', 'PremiumV3')))))]"
      },
      "kind": "app",
      "properties": {
        "reserved": false
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableRbacAuthorization": false,
        "accessPolicies": [],
        "createMode": "[if(parameters('enableKeyVaultRecovery'), 'recover', 'default')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "kind": "app",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "siteConfig": {
          "netFrameworkVersion": "v8.0",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnet"
            }
          ],
          "appSettings": [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "Production"
            },
            {
              "name": "KeyVaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            {
              "name": "DEPLOYMENT_TIMESTAMP",
              "value": "[parameters('forceRedeploy')]"
            },
            {
              "name": "WEBSITE_WEBDEPLOY_USE_SCM",
              "value": "true"
            }
          ],
          "alwaysOn": "[and(not(equals(parameters('sku'), 'F1')), not(equals(parameters('sku'), 'B1')))]",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "use32BitWorkerProcess": "[equals(parameters('sku'), 'F1')]",
          "webSocketsEnabled": true
        },
        "httpsOnly": true,
        "publicNetworkAccess": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'nsa-search-key')]",
      "properties": {
        "value": "[parameters('nsaSearchApiKey')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'nsa-detail-key')]",
      "properties": {
        "value": "[parameters('nsaDetailApiKey')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "deployment-identity",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "emailPublishProfile",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.76.0",
        "environmentVariables": [
          {
            "name": "WEBAPP_NAME",
            "value": "[parameters('webAppName')]"
          },
          {
            "name": "RG_NAME",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "EMAIL_TO",
            "value": "19bartek92@gmail.com"
          },
          {
            "name": "GITHUB_PAT",
            "secureValue": "[parameters('gitHubPat')]"
          },
          {
            "name": "GITHUB_REPO",
            "value": "19bartek92/taxAssistantApp"
          }
        ],
        "scriptContent": "      set -e\n      echo \"Getting publish profile for webapp: $WEBAPP_NAME\"\n      \n      # Get publish profile\n      echo \"Downloading publish profile...\"\n      PUBLISH_PROFILE=$(az webapp deployment list-publishing-profiles --name $WEBAPP_NAME --resource-group $RG_NAME --xml)\n      \n      if [ -z \"$PUBLISH_PROFILE\" ]; then\n        echo \"ERROR: Failed to get publish profile\"\n        exit 1\n      fi\n      \n      echo \"Publish profile retrieved successfully\"\n      \n      # Save to file\n      echo \"$PUBLISH_PROFILE\" > /tmp/publish-profile.xml\n      \n      # Get webapp URL\n      WEBAPP_URL=$(az webapp show --name $WEBAPP_NAME --resource-group $RG_NAME --query \"defaultHostName\" -o tsv)\n      \n      # Create email content\n      cat > /tmp/email-content.txt << EOF\nSubject: TaxAssistant App Deployment Profile - $WEBAPP_NAME\n\nYour TaxAssistant application has been successfully deployed to Azure!\n\nApp Service Name: $WEBAPP_NAME\nResource Group: $RG_NAME\nURL: https://$WEBAPP_URL\n\nPublish Profile is attached.\n\nTo deploy your application:\n1. Use the attached publish profile with Visual Studio or VS Code\n2. Or use GitHub Actions with the publish profile as a secret\n\nNext steps:\n- Configure GitHub Actions for automated deployment\n- Update application code and deploy using the profile\n\nGenerated automatically by Azure deployment script.\nEOF\n\n      echo \"Email content prepared\"\n      echo \"Webapp URL: https://$WEBAPP_URL\"\n      echo \"Publish profile saved to /tmp/publish-profile.xml\"\n      echo \"Email would be sent to: $EMAIL_TO\"\n      \n      # Log the profile for debugging\n      echo \"=== PUBLISH PROFILE START ===\"\n      cat /tmp/publish-profile.xml\n      echo \"=== PUBLISH PROFILE END ===\"\n      \n      # Send email using EmailJS public API (no auth required for basic usage)\n      echo \"Sending email with publish profile...\"\n      \n      # Encode publish profile for JSON\n      PUBLISH_PROFILE_ENCODED=$(cat /tmp/publish-profile.xml | base64 -w 0)\n      \n      # Create JSON payload for email\n      cat > /tmp/email-payload.json << EOF\n{\n  \"service_id\": \"default_service\",\n  \"template_id\": \"template_deployment\",\n  \"user_id\": \"public\",\n  \"template_params\": {\n    \"to_email\": \"$EMAIL_TO\",\n    \"subject\": \"TaxAssistant App Deployment Profile - $WEBAPP_NAME\",\n    \"message\": \"Your TaxAssistant application has been successfully deployed to Azure!\\n\\nApp Service Name: $WEBAPP_NAME\\nResource Group: $RG_NAME\\nURL: https://$WEBAPP_URL\\n\\nPublish Profile (base64 encoded):\\n$PUBLISH_PROFILE_ENCODED\\n\\nTo use the profile:\\n1. Decode the base64 content\\n2. Save as .pubxml file\\n3. Use with Visual Studio or GitHub Actions\\n\\nGenerated automatically by Azure deployment.\"\n  }\n}\nEOF\n\n      # Try to send email via simple SMTP relay service\n      echo \"Attempting to send email...\"\n      \n      # Method 1: Try sending via SMTP using curl (if available)\n      echo \"Method 1: Attempting SMTP email...\"\n      \n      # Create email body\n      cat > /tmp/email-body.txt << 'EMAILEOF'\nSubject: TaxAssistant Deployment Profile\nTo: 19bartek92@gmail.com\nFrom: azure-deploy@noreply.com\nContent-Type: text/plain\n\nYour TaxAssistant application has been successfully deployed to Azure!\n\nApp Service Name: ${WEBAPP_NAME}\nResource Group: ${RG_NAME}  \nURL: https://${WEBAPP_URL}\n\nPublish Profile (base64 encoded - decode and save as .pubxml):\n${PUBLISH_PROFILE_ENCODED}\n\nTo use the profile:\n1. Copy the base64 content above\n2. Decode it: echo \"BASE64_CONTENT\" | base64 -d > profile.pubxml\n3. Use with Visual Studio or add as GitHub secret\n\nGenerated automatically by Azure deployment script.\nEMAILEOF\n\n      # Replace variables in email\n      sed -i \"s/\\${WEBAPP_NAME}/$WEBAPP_NAME/g\" /tmp/email-body.txt\n      sed -i \"s/\\${RG_NAME}/$RG_NAME/g\" /tmp/email-body.txt  \n      sed -i \"s/\\${WEBAPP_URL}/$WEBAPP_URL/g\" /tmp/email-body.txt\n      sed -i \"s/\\${PUBLISH_PROFILE_ENCODED}/$PUBLISH_PROFILE_ENCODED/g\" /tmp/email-body.txt\n      \n      # Email sending disabled for now - publish profile is logged above\n      echo \"Email sending temporarily disabled\"\n      echo \"Publish profile is available in the logs above\"\n      \n      # GitHub Secret Setup (automatic if PAT provided, manual otherwise)\n      if [ -n \"$GITHUB_PAT\" ] && [ \"$GITHUB_PAT\" != \"\" ]; then\n        echo \"=== AUTOMATIC GITHUB SECRET SETUP ===\"\n        echo \"GitHub PAT provided, attempting automatic secret creation...\"\n        \n        # Test GitHub API access\n        TEST_RESPONSE=$(curl -s -H \"Authorization: token $GITHUB_PAT\" \\\n          \"https://api.github.com/repos/$GITHUB_REPO\")\n        \n        if echo \"$TEST_RESPONSE\" | grep -q '\"name\"'; then\n          echo \"GitHub API access successful\"\n          \n          # Get public key for encryption\n          echo \"Getting repository public key for secret encryption...\"\n          PUBLIC_KEY_RESPONSE=$(curl -s -H \"Authorization: token $GITHUB_PAT\" \\\n            \"https://api.github.com/repos/$GITHUB_REPO/actions/secrets/public-key\")\n          \n          if echo \"$PUBLIC_KEY_RESPONSE\" | grep -q '\"key\"'; then\n            echo \"Public key retrieved successfully\"\n            echo \"Note: GitHub Secrets require libsodium encryption which is complex in bash\"\n            echo \"For now, storing base64 encoded version for manual setup\"\n            \n            # For now, provide manual instructions with the token working\n            echo \"GitHub API is working - you can add the secret manually or via CLI\"\n          else\n            echo \"Failed to get public key: $PUBLIC_KEY_RESPONSE\"\n          fi\n        else\n          echo \"GitHub API access failed: $TEST_RESPONSE\"\n        fi\n      else\n        echo \"=== MANUAL GITHUB SECRET SETUP ===\"\n        echo \"No GitHub PAT provided - manual setup required\"\n      fi\n      \n      echo \"\"\n      echo \"=== GITHUB SECRET SETUP INSTRUCTIONS ===\"\n      echo \"Repository: $GITHUB_REPO\"\n      echo \"\"\n      echo \"1. Go to: https://github.com/$GITHUB_REPO/settings/secrets/actions\"\n      echo \"2. Click 'New repository secret'\"  \n      echo \"3. Name: AZURE_WEBAPP_PUBLISH_PROFILE\"\n      echo \"4. Value: Copy the publish profile XML from === PUBLISH PROFILE START === section above\"\n      echo \"5. Click 'Add secret'\"\n      echo \"\"\n      echo \"GitHub Actions usage:\"\n      echo \"- uses: azure/webapps-deploy@v2\"\n      echo \"  with:\"\n      echo \"    app-name: '$WEBAPP_NAME'\"\n      echo \"    publish-profile: \\${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}\"\n      echo \"\"\n      echo \"Webapp URL: https://$WEBAPP_URL\"\n      echo \"============================================\"\n    ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "timeout": "PT10M"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'nsa-detail-key')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'nsa-search-key')]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'b24988ac-6180-42a0-ab88-20f7382dd24c'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ]
    }
  ],
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName)]"
    },
    "webAppName": {
      "type": "string",
      "value": "[parameters('webAppName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    }
  }
}