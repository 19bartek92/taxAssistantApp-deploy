{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.38.5.1644",
      "templateHash": "18110231726887490243"
    }
  },
  "parameters": {
    "appServicePlanName": {
      "type": "string",
      "defaultValue": "taxassistant-plan",
      "metadata": {
        "description": "Name of the App Service Plan"
      }
    },
    "webAppName": {
      "type": "string",
      "defaultValue": "[format('taxassistant-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Name of the Web App"
      }
    },
    "location": {
      "type": "string",
      "defaultValue": "West Europe",
      "metadata": {
        "description": "Location for all resources"
      }
    },
    "sku": {
      "type": "string",
      "defaultValue": "S1",
      "allowedValues": [
        "F1",
        "B1",
        "B2",
        "S1",
        "S2",
        "P1v3",
        "P2v3"
      ],
      "metadata": {
        "description": "SKU for App Service Plan"
      }
    },
    "nsaSearchApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "NSA Search API Key"
      }
    },
    "nsaDetailApiKey": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "NSA Detail API Key"
      }
    },
    "keyVaultName": {
      "type": "string",
      "defaultValue": "[format('kv-{0}', uniqueString(resourceGroup().id))]",
      "metadata": {
        "description": "Key Vault Name"
      }
    },
    "enableKeyVaultRecovery": {
      "type": "bool",
      "defaultValue": false,
      "metadata": {
        "description": "Enable Key Vault recovery (for existing deleted vaults)"
      }
    },
    "forceRedeploy": {
      "type": "string",
      "defaultValue": "[utcNow('yyyyMMddHHmmss')]",
      "metadata": {
        "description": "Force application redeployment (change this value to trigger update)"
      }
    },
    "gitHubRepo": {
      "type": "string",
      "defaultValue": "19bartek92/taxAssistantApp",
      "metadata": {
        "description": "GitHub repository in format owner/repo"
      }
    },
    "gitHubBranch": {
      "type": "string",
      "defaultValue": "main",
      "metadata": {
        "description": "GitHub branch for OIDC federation"
      }
    },
    "gitHubPat": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "GitHub PAT token for automatic secret creation (optional)"
      }
    }
  },
  "resources": [
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2023-01-01",
      "name": "[parameters('appServicePlanName')]",
      "location": "[parameters('location')]",
      "sku": {
        "name": "[parameters('sku')]",
        "tier": "[if(equals(parameters('sku'), 'F1'), 'Free', if(equals(parameters('sku'), 'B1'), 'Basic', if(equals(parameters('sku'), 'B2'), 'Basic', if(equals(parameters('sku'), 'S1'), 'Standard', if(equals(parameters('sku'), 'S2'), 'Standard', 'PremiumV3')))))]"
      },
      "kind": "app",
      "properties": {
        "reserved": false
      }
    },
    {
      "type": "Microsoft.KeyVault/vaults",
      "apiVersion": "2023-07-01",
      "name": "[parameters('keyVaultName')]",
      "location": "[parameters('location')]",
      "properties": {
        "sku": {
          "family": "A",
          "name": "standard"
        },
        "tenantId": "[subscription().tenantId]",
        "enableRbacAuthorization": false,
        "accessPolicies": [],
        "createMode": "[if(parameters('enableKeyVaultRecovery'), 'recover', 'default')]"
      }
    },
    {
      "type": "Microsoft.Web/sites",
      "apiVersion": "2023-01-01",
      "name": "[parameters('webAppName')]",
      "location": "[parameters('location')]",
      "kind": "app",
      "identity": {
        "type": "SystemAssigned"
      },
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "siteConfig": {
          "netFrameworkVersion": "v8.0",
          "metadata": [
            {
              "name": "CURRENT_STACK",
              "value": "dotnet"
            }
          ],
          "appSettings": [
            {
              "name": "ASPNETCORE_ENVIRONMENT",
              "value": "Production"
            },
            {
              "name": "KeyVaultUri",
              "value": "[reference(resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName')), '2023-07-01').vaultUri]"
            },
            {
              "name": "DEPLOYMENT_TIMESTAMP",
              "value": "[parameters('forceRedeploy')]"
            },
            {
              "name": "WEBSITE_WEBDEPLOY_USE_SCM",
              "value": "true"
            }
          ],
          "alwaysOn": "[and(not(equals(parameters('sku'), 'F1')), not(equals(parameters('sku'), 'B1')))]",
          "httpLoggingEnabled": true,
          "logsDirectorySizeLimit": 35,
          "detailedErrorLoggingEnabled": true,
          "ftpsState": "Disabled",
          "minTlsVersion": "1.2",
          "scmMinTlsVersion": "1.2",
          "use32BitWorkerProcess": "[equals(parameters('sku'), 'F1')]",
          "webSocketsEnabled": true
        },
        "httpsOnly": true,
        "publicNetworkAccess": "Enabled"
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', parameters('appServicePlanName'))]",
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/accessPolicies",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'add')]",
      "properties": {
        "accessPolicies": [
          {
            "tenantId": "[subscription().tenantId]",
            "objectId": "[reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01', 'full').identity.principalId]",
            "permissions": {
              "secrets": [
                "get",
                "list"
              ]
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'nsa-search-key')]",
      "properties": {
        "value": "[parameters('nsaSearchApiKey')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.KeyVault/vaults/secrets",
      "apiVersion": "2023-07-01",
      "name": "[format('{0}/{1}', parameters('keyVaultName'), 'nsa-detail-key')]",
      "properties": {
        "value": "[parameters('nsaDetailApiKey')]"
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults', parameters('keyVaultName'))]"
      ]
    },
    {
      "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
      "apiVersion": "2023-01-31",
      "name": "deployment-identity",
      "location": "[parameters('location')]"
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity')]"
      ]
    },
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'de139f84-1756-47ae-9be6-808fbbe84772')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', 'de139f84-1756-47ae-9be6-808fbbe84772')]",
        "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), '2023-01-31').principalId]",
        "principalType": "ServicePrincipal"
      },
      "dependsOn": [
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deploymentScripts",
      "apiVersion": "2023-08-01",
      "name": "githubOidcSetup",
      "location": "[parameters('location')]",
      "kind": "AzureCLI",
      "properties": {
        "azCliVersion": "2.76.0",
        "environmentVariables": [
          {
            "name": "RG_NAME",
            "value": "[resourceGroup().name]"
          },
          {
            "name": "SUBSCRIPTION_ID",
            "value": "[subscription().subscriptionId]"
          },
          {
            "name": "TENANT_ID",
            "value": "[subscription().tenantId]"
          },
          {
            "name": "GITHUB_PAT",
            "secureValue": "[parameters('gitHubPat')]"
          },
          {
            "name": "GITHUB_REPO",
            "value": "[parameters('gitHubRepo')]"
          },
          {
            "name": "GITHUB_BRANCH",
            "value": "[parameters('gitHubBranch')]"
          },
          {
            "name": "WEBAPP_NAME",
            "value": "[parameters('webAppName')]"
          }
        ],
        "scriptContent": "      set -e\n      echo \"Setting up GitHub OIDC authentication for Azure deployment\"\n      \n      # Create Entra Application for GitHub OIDC\n      echo \"Creating Entra Application for GitHub OIDC...\"\n      APP_NAME=\"GitHub-OIDC-${WEBAPP_NAME}\"\n      \n      # Create Azure AD application\n      APP_RESPONSE=$(az ad app create \\\n        --display-name \"$APP_NAME\" \\\n        --sign-in-audience AzureADMyOrg)\n      \n      if [ $? -ne 0 ]; then\n        echo \"ERROR: Failed to create Azure AD application\"\n        exit 1\n      fi\n      \n      CLIENT_ID=$(echo \"$APP_RESPONSE\" | jq -r '.appId')\n      APP_OBJECT_ID=$(echo \"$APP_RESPONSE\" | jq -r '.id')\n      \n      echo \"✅ Created Azure AD Application: $CLIENT_ID\"\n      \n      # Create service principal\n      echo \"Creating service principal...\"\n      SP_RESPONSE=$(az ad sp create --id \"$CLIENT_ID\")\n      SP_OBJECT_ID=$(echo \"$SP_RESPONSE\" | jq -r '.id')\n      \n      echo \"✅ Created Service Principal: $SP_OBJECT_ID\"\n      \n      # Add federated identity credential\n      echo \"Adding federated identity credential for GitHub Actions...\"\n      CREDENTIAL_BODY=$(cat << EOF\n{\n  \"name\": \"github-oidc\",\n  \"issuer\": \"https://token.actions.githubusercontent.com\",\n  \"subject\": \"repo:${GITHUB_REPO}:ref:refs/heads/${GITHUB_BRANCH}\",\n  \"description\": \"OIDC login from GitHub Actions\",\n  \"audiences\": [\"api://AzureADTokenExchange\"]\n}\nEOF\n)\n      \n      CREDENTIAL_RESPONSE=$(az rest \\\n        --method POST \\\n        --uri \"https://graph.microsoft.com/v1.0/applications/$APP_OBJECT_ID/federatedIdentityCredentials\" \\\n        --headers \"Content-Type=application/json\" \\\n        --body \"$CREDENTIAL_BODY\")\n      \n      if [ $? -eq 0 ]; then\n        echo \"✅ Added federated identity credential\"\n      else\n        echo \"⚠️ Warning: Could not add federated credential (may already exist)\"\n      fi\n      \n      # Assign Contributor role to service principal on resource group\n      echo \"Assigning Contributor role to service principal...\"\n      az role assignment create \\\n        --assignee \"$CLIENT_ID\" \\\n        --role \"Contributor\" \\\n        --scope \"/subscriptions/$SUBSCRIPTION_ID/resourceGroups/$RG_NAME\"\n      \n      echo \"✅ Assigned Contributor role\"\n      \n      # Setup GitHub secrets (if PAT provided)\n      if [ -n \"$GITHUB_PAT\" ] && [ \"$GITHUB_PAT\" != \"\" ]; then\n        echo \"=== AUTOMATIC GITHUB SECRETS SETUP ===\"\n        echo \"GitHub PAT provided, setting up OIDC secrets...\"\n        \n        # Install dependencies for encryption\n        apt-get update\n        apt-get install -y python3-pip\n        pip3 install pynacl\n        \n        # Test GitHub API access\n        TEST_RESPONSE=$(curl -s -H \"Authorization: token $GITHUB_PAT\" \\\n          \"https://api.github.com/repos/$GITHUB_REPO\")\n        \n        if echo \"$TEST_RESPONSE\" | grep -q '\"name\"'; then\n          echo \"GitHub API access successful\"\n          \n          # Get repository public key for encryption\n          PUBLIC_KEY_RESPONSE=$(curl -s -H \"Authorization: token $GITHUB_PAT\" \\\n            \"https://api.github.com/repos/$GITHUB_REPO/actions/secrets/public-key\")\n          \n          if echo \"$PUBLIC_KEY_RESPONSE\" | grep -q '\"key\"'; then\n            PUBLIC_KEY=$(echo \"$PUBLIC_KEY_RESPONSE\" | jq -r '.key')\n            KEY_ID=$(echo \"$PUBLIC_KEY_RESPONSE\" | jq -r '.key_id')\n            \n            # Create encryption script\n            cat > /tmp/encrypt_secret.py << 'PYEOF'\nimport base64\nimport sys\nfrom nacl import encoding, public\nfrom nacl.public import SealedBox\n\ndef encrypt_secret(public_key_b64, secret_value):\n    public_key = public.PublicKey(public_key_b64.encode(\"utf-8\"), encoder=encoding.Base64Encoder())\n    sealed_box = SealedBox(public_key)\n    encrypted = sealed_box.encrypt(secret_value.encode(\"utf-8\"))\n    return base64.b64encode(encrypted).decode(\"utf-8\")\n\nif __name__ == \"__main__\":\n    public_key = sys.argv[1]\n    secret = sys.argv[2]\n    encrypted = encrypt_secret(public_key, secret)\n    print(encrypted)\nPYEOF\n            \n            # Create secrets\n            echo \"Creating GitHub secrets...\"\n            \n            # AZURE_CLIENT_ID\n            ENCRYPTED_CLIENT_ID=$(python3 /tmp/encrypt_secret.py \"$PUBLIC_KEY\" \"$CLIENT_ID\")\n            curl -s -X PUT \\\n              -H \"Authorization: token $GITHUB_PAT\" \\\n              -H \"Content-Type: application/json\" \\\n              -d \"{\\\"encrypted_value\\\":\\\"$ENCRYPTED_CLIENT_ID\\\",\\\"key_id\\\":\\\"$KEY_ID\\\"}\" \\\n              \"https://api.github.com/repos/$GITHUB_REPO/actions/secrets/AZURE_CLIENT_ID\"\n            \n            # AZURE_TENANT_ID  \n            ENCRYPTED_TENANT_ID=$(python3 /tmp/encrypt_secret.py \"$PUBLIC_KEY\" \"$TENANT_ID\")\n            curl -s -X PUT \\\n              -H \"Authorization: token $GITHUB_PAT\" \\\n              -H \"Content-Type: application/json\" \\\n              -d \"{\\\"encrypted_value\\\":\\\"$ENCRYPTED_TENANT_ID\\\",\\\"key_id\\\":\\\"$KEY_ID\\\"}\" \\\n              \"https://api.github.com/repos/$GITHUB_REPO/actions/secrets/AZURE_TENANT_ID\"\n            \n            # AZURE_SUBSCRIPTION_ID\n            ENCRYPTED_SUBSCRIPTION_ID=$(python3 /tmp/encrypt_secret.py \"$PUBLIC_KEY\" \"$SUBSCRIPTION_ID\")\n            curl -s -X PUT \\\n              -H \"Authorization: token $GITHUB_PAT\" \\\n              -H \"Content-Type: application/json\" \\\n              -d \"{\\\"encrypted_value\\\":\\\"$ENCRYPTED_SUBSCRIPTION_ID\\\",\\\"key_id\\\":\\\"$KEY_ID\\\"}\" \\\n              \"https://api.github.com/repos/$GITHUB_REPO/actions/secrets/AZURE_SUBSCRIPTION_ID\"\n            \n            echo \"✅ SUCCESS: GitHub OIDC secrets created!\"\n            echo \"Secrets: AZURE_CLIENT_ID, AZURE_TENANT_ID, AZURE_SUBSCRIPTION_ID\"\n          else\n            echo \"❌ Failed to get repository public key\"\n          fi\n        else\n          echo \"❌ GitHub API access failed\"\n        fi\n      else\n        echo \"=== MANUAL GITHUB SECRETS SETUP ===\"\n        echo \"No GitHub PAT provided - manual setup required\"\n      fi\n      \n      echo \"\"\n      echo \"=== OIDC SETUP COMPLETE ===\"\n      echo \"Client ID: $CLIENT_ID\"\n      echo \"Tenant ID: $TENANT_ID\"  \n      echo \"Subscription ID: $SUBSCRIPTION_ID\"\n      echo \"\"\n      echo \"GitHub Actions OIDC configuration:\"\n      echo \"1. Go to: https://github.com/$GITHUB_REPO/settings/secrets/actions\"\n      echo \"2. Add these secrets (if not done automatically):\"\n      echo \"   - AZURE_CLIENT_ID: $CLIENT_ID\"\n      echo \"   - AZURE_TENANT_ID: $TENANT_ID\"\n      echo \"   - AZURE_SUBSCRIPTION_ID: $SUBSCRIPTION_ID\"\n      echo \"\"\n      echo \"GitHub Actions workflow example:\"\n      echo \"- uses: azure/login@v2\"\n      echo \"  with:\"\n      echo \"    client-id: \\${{ secrets.AZURE_CLIENT_ID }}\"\n      echo \"    tenant-id: \\${{ secrets.AZURE_TENANT_ID }}\"\n      echo \"    subscription-id: \\${{ secrets.AZURE_SUBSCRIPTION_ID }}\"\n      echo \"\"\n      echo \"App URL: https://$(az webapp show --name $WEBAPP_NAME --resource-group $RG_NAME --query defaultHostName -o tsv)\"\n    ",
        "cleanupPreference": "OnSuccess",
        "retentionInterval": "P1D",
        "timeout": "PT10M"
      },
      "identity": {
        "type": "UserAssigned",
        "userAssignedIdentities": {
          "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'))]": {}
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.KeyVault/vaults/accessPolicies', parameters('keyVaultName'), 'add')]",
        "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'nsa-detail-key')]",
        "[resourceId('Microsoft.KeyVault/vaults/secrets', parameters('keyVaultName'), 'nsa-search-key')]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'b24988ac-6180-42a0-ab88-20f7382dd24c'))]",
        "[resourceId('Microsoft.Web/sites', parameters('webAppName'))]",
        "[resourceId('Microsoft.Authorization/roleAssignments', guid(resourceGroup().id, resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', 'deployment-identity'), 'de139f84-1756-47ae-9be6-808fbbe84772'))]"
      ]
    }
  ],
  "outputs": {
    "webAppUrl": {
      "type": "string",
      "value": "[format('https://{0}', reference(resourceId('Microsoft.Web/sites', parameters('webAppName')), '2023-01-01').defaultHostName)]"
    },
    "webAppName": {
      "type": "string",
      "value": "[parameters('webAppName')]"
    },
    "resourceGroupName": {
      "type": "string",
      "value": "[resourceGroup().name]"
    },
    "clientId": {
      "type": "string",
      "value": "Will be created by deployment script"
    },
    "tenantId": {
      "type": "string",
      "value": "[subscription().tenantId]"
    },
    "subscriptionId": {
      "type": "string",
      "value": "[subscription().subscriptionId]"
    },
    "gitHubRepo": {
      "type": "string",
      "value": "[parameters('gitHubRepo')]"
    },
    "gitHubBranch": {
      "type": "string",
      "value": "[parameters('gitHubBranch')]"
    }
  }
}